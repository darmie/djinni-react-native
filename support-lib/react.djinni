job = interface +c {
  run();
}

job_queue = interface +c {
  poll(): job;
  interruptPoll();
}

job_dispatcher = interface +j +o {
  start();
  quit();
}

react_bridge = interface +j +o {
  createMap(): javascript_map;
  createArray(): javascript_array;

  copyMap(map: javascript_map): javascript_map;
  copyArray(array: javascript_array): javascript_array;

  emitEventWithMap(name: string, params: javascript_map);
  emitEventWithArray(name: string, params: javascript_array);

  createJobDispatcher(queue: job_queue): job_dispatcher;
}

javascript_type = enum {
  NIL;
  BOOLEAN;
  NUMBER;
  STRING;
  ARRAY;
  MAP;
}

javascript_object = interface +c {
  getType(): javascript_type;
  isNull(): bool;
  static fromNull(): javascript_object;
  asBoolean(): bool;
  static fromBoolean(value: bool): javascript_object;
  asDouble(): f64;
  static fromDouble(value: f64): javascript_object;
  asInt(): i32;
  static fromInt(value: i32): javascript_object;
  asString(): string;
  static fromString(value: string): javascript_object;
  asArray(): javascript_array;
  static fromArray(value: javascript_array): javascript_object;
  asMap(): javascript_map;
  static fromMap(value: javascript_map): javascript_object;
}

javascript_map = interface +j +o {
  hasKey(name: string): bool;
  isNull(name: string): bool;
  getBoolean(name: string): bool;
  getDouble(name: string): f64;
  getInt(name: string): i32;
  getString(name: string): string;
  getArray(name: string): javascript_array;
  getMap(name: string): javascript_map;
  getObject(name: string): javascript_object;
  getType(name: string): javascript_type;
  keySetIterator(): javascript_map_key_iterator;

  putNull(key: string);
  putBoolean(key: string, value: bool);
  putDouble(key: string, value: f64);
  putInt(key: string, value: i32);
  putString(key: string, value: string);
  putArray(key: string, value: javascript_array);
  putMap(key: string, value: javascript_map);
  putObject(key: string, value: javascript_object);

  merge(source: javascript_map);
}

javascript_map_key_iterator = interface +j +o {
  hasNextKey(): bool;
  nextKey(): string;
}

javascript_array = interface +j +o {
  size(): i32;
  isNull(index: i32): bool;
  getBoolean(index: i32): bool;
  getDouble(index: i32): f64;
  getInt(index: i32): i32;
  getString(index: i32): string;
  getArray(index: i32): javascript_array;
  getMap(index: i32): javascript_map;
  getObject(index: i32): javascript_object;
  getType(index: i32): javascript_type;

  pushNull();
  pushBoolean(value: bool);
  pushDouble(value: f64);
  pushInt(value: i32);
  pushString(value: string);
  pushArray(array: javascript_array);
  pushMap(map: javascript_map);
  pushObject(object: javascript_object);

  append(source: javascript_array);
}

javascript_callback = interface +j +o {
  invoke(args: list<javascript_object>);
  invokeSingleArg(arg: javascript_object);
}

javascript_promise = interface +j +o {
  resolveNull();
  resolveBoolean(value: bool);
  resolveDouble(value: f64);
  resolveInt(value: i32);
  resolveString(value: string);
  resolveArray(value: javascript_array);
  resolveMap(value: javascript_map);
  resolveObject(value: javascript_object);
  reject(code: string, message: string);
}
